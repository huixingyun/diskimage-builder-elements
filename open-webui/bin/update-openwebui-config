#!/usr/bin/env python3

import argparse
import os
import urllib.request
from urllib.error import HTTPError
import json

# ref: https://docs.openwebui.com/getting-started/troubleshooting#reset-admin-password

cfg_path = "/root/open-webui/backend/data/webui.db"
service_name = "openwebui.service"
default_endpoint = "http://localhost:10000"
gen_img_service_name = "comfyui.service"


def create_auth(username, password, endpoint) -> bool:
    # request email, password, name in json format
    data = {
        "name": "admin",
        "email": username,
        "password": password,
    }
    headers = {"Content-Type": "application/json"}
    encode_data = json.dumps(data).encode("utf-8")
    req = urllib.request.Request(
        endpoint + "/api/v1/auths/signup",
        data=encode_data,
        headers=headers,
        method="POST",
    )

    try:
        resp = urllib.request.urlopen(req)
        resp_data = resp.read().decode("utf-8")
        print(f"Created admin {username}: {resp_data}")
    except HTTPError as e:
        if e.code == 400:
            print(f"Admin {username} already exists")
            return False
        else:
            raise e
    return True


def update_auth(username, password):
    # encode password using htpasswd
    import subprocess

    p = subprocess.run(
        ["htpasswd", "-bnBC", "10", "", password], stdout=subprocess.PIPE
    )
    password = p.stdout.decode("utf-8").strip().split(":")[1]

    p = subprocess.run(
        [
            "sqlite3",
            cfg_path,
            f"UPDATE auth SET password='{password}' WHERE email='{username}';",
        ]
    )
    print(f"Updated password for {username}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("username", help="openwebui username")
    parser.add_argument("password", help="openwebui password")
    parser.add_argument(
        "--endpoint", help="openwebui base url", default=default_endpoint
    )
    args = parser.parse_args()

    if not create_auth(args.username, args.password, args.endpoint):
        update_auth(args.username, args.password)

    # if service not running then start it
    if os.system(f"systemctl is-active --quiet {service_name}") != 0:
        os.system(f"systemctl enable --now {service_name}")
    else:
        os.system(f"systemctl restart {service_name}")

    if os.system(f"systemctl is-active --quiet {gen_img_service_name}") != 0:
        os.system(f"systemctl enable --now {gen_img_service_name}")
    else:
        os.system(f"systemctl restart {gen_img_service_name}")
