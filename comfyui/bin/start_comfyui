#!/usr/bin/env bash
set -e

# set http proxy 
. network-turbo && proxy_set

APP_NAME="ComfyUI"
APP_DIR=${COMFYUI_DIR:-"/root/${APP_NAME}"}
APP_PORT=${COMFYUI_PORT:-"10000"}
APP_DATA_TAR=${COMFYUI_DATA_TAR:-"/root/${APP_NAME}_data.tar"}
APP_DATA_VOLUME=${COMFYUI_DATA_VOLUME:-"/root/data"}
APP_VENV_DIR=${COMFYUI_VENV_DIR:-"${APP_DIR}/venv"}
# share public data
APP_PUBLIC_DATA=${COMFYUI_PUBLIC_DATA:-"public-data:public/sd_data"}

APP_DATA_DIR="${APP_DATA_VOLUME}/${APP_NAME}"
data_version="$(basename "$(readlink "${APP_DATA_TAR}")")"
APP_INIT_START="${APP_DATA_DIR}/${data_version}.init-start"
APP_INIT_DONE="${APP_DATA_DIR}/${data_version}.init-done"

CACHE=${APP_DIR}/.cache
export XDG_CACHE_HOME=${CACHE}

# make sure conda env exist
if ! $(conda env list | grep -q "${APP_NAME}"); then
    echo "Creating conda env '${APP_NAME}'"
    conda create -y --name "${APP_NAME}" python=3.10.13
fi

# check if venv is a link file
if [ -L "${APP_VENV_DIR}" ]; then
    # try extract from existing tar file
    if [ -f "${APP_DATA_TAR}" ] && ([ ! -d "$(readlink "${APP_VENV_DIR}")" ] || [ ! -f "${APP_INIT_DONE}" ]); then
        echo "First launch will take some time, please be patient..."

        if [ -d "${APP_DATA_DIR}" ] && [ ! -z "ls -A ${APP_DATA_DIR}" ]; then
            # last init not complete
            if [ -f "${APP_INIT_START}" ] && [ ! -f "${APP_INIT_DONE}" ]; then
                echo "Last init not complete, delete ${APP_DATA_DIR} and try again."
                rm -rf "${APP_DATA_DIR}"
            else
                # rename the dir
                BAK="${APP_DATA_DIR}_$(date +%s)"
                echo "Renaming ${APP_DATA_DIR} to ${BAK}"
                mv -v "${APP_DATA_DIR}" "${BAK}"
            fi
        fi

        # set a empty file to indicate init start
        mkdir -p "${APP_DATA_DIR}"
        touch "${APP_INIT_START}"

        echo "Uncompressing data from ${APP_DATA_TAR} to ${APP_DATA_VOLUME}"
        tar -xf "${APP_DATA_TAR}" -C "${APP_DATA_VOLUME}" \
            --checkpoint=$(($(stat -L -c %s "${APP_DATA_TAR}") / 512 / 20 / 100)) \
            --checkpoint-action=. &&
            echo "Done"

        # sync models from public data
        if rclone lsd "${APP_PUBLIC_DATA}" &>/dev/null; then
            echo "Syncing public data: from ${APP_PUBLIC_DATA}/ to ${APP_DATA_DIR}/"
            rclone sync --progress \
                "${APP_PUBLIC_DATA}/models/embeddings/" \
                "${APP_DATA_DIR}/models/embeddings/"
            rclone sync --progress \
                "${APP_PUBLIC_DATA}/models/checkpoints/" \
                "${APP_DATA_DIR}/models/checkpoints/"
            rclone sync --progress \
                "${APP_PUBLIC_DATA}/models/vae/" \
                "${APP_DATA_DIR}/models/vae/"
            rclone sync --progress \
                "${APP_PUBLIC_DATA}/models/vae_approx/" \
                "${APP_DATA_DIR}/models/vae_approx/"
            rclone sync --progress \
                "${APP_PUBLIC_DATA}/models/controlnet/" \
                "${APP_DATA_DIR}/models/controlnet/"
        fi

        # set a empty file to indicate init complete
        touch "${APP_INIT_DONE}"

    else
        # check all link files in ${APP_DIR}, if link target dir not exist, create the target dir
        for f in $(find "${APP_DIR}" -type l); do
            target="$(readlink "${f}")"
            if [ ! -d "${target}" ]; then
                mkdir -p "${target}"
            fi
        done
    fi
fi

load_venv() {
    if [[ -z "${VIRTUAL_ENV}" ]]; then
        if [[ -f "${APP_VENV_DIR}/bin/activate" ]]; then
            source "${APP_VENV_DIR}/bin/activate"
        else
            echo "No venv found, creating a new one"
            "$(conda env list | awk '$1 == "'${APP_NAME}'" { print $NF }')/bin/python" \
                -m venv "$([[ -L "${APP_VENV_DIR}" ]] && readlink "${APP_VENV_DIR}" || echo "${APP_VENV_DIR}")"
            source "${APP_VENV_DIR}/bin/activate"
            # first launch
            pip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu121
            pip install -r "${APP_DIR}/requirements.txt"
        fi
    else
        printf "python venv already activate or run without venv: ${VIRTUAL_ENV}"
    fi
}

cd "${APP_DIR}" && load_venv &&
    python3 main.py \
        --listen \
        --port "${APP_PORT}" \
        --preview-method auto \
        $@
