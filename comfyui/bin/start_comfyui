#!/usr/bin/env bash
set -e

APP_NAME="ComfyUI"
APP_HOME="/root"
APP_PY_VERSION="3.10.13"
APP_PORT=${COMFYUI_PORT:-"10000"}
APP_DIR=${COMFYUI_DIR:-"${APP_HOME}/${APP_NAME}"}
APP_VENV_DIR=${COMFYUI_VENV_DIR:-"${APP_DIR}/venv"}
APP_DATA_VOLUME=${COMFYUI_DATA_VOLUME:-"${APP_HOME}/data"}

APP_DATA_TAR=${COMFYUI_DATA_TAR:-"/root/${APP_NAME}_data.tar"}
APP_PUBLIC_DATA=${COMFYUI_PUBLIC_DATA:-"public-data:public/sd_data"}
APP_DATA_DIR="${APP_DATA_VOLUME}/${APP_NAME}"
APP_INIT_START="${APP_DATA_DIR}/.init-start"
APP_INIT_DONE="${APP_DATA_DIR}/.init-done"

# set models dir
export COMFYUI_MODEL_PATH="${APP_DATA_DIR}/models"

# set cache dir
export XDG_CACHE_HOME="${APP_DATA_DIR}/.cache"

# make sure conda env exist
if ! $(conda env list | grep -q "${APP_NAME}"); then
    echo "Creating conda env '${APP_NAME}'"
    conda create -y --name "${APP_NAME}" python=${APP_PY_VERSION}
fi

# prepare models files
if [ ! -f "${APP_INIT_DONE}" ]; then
    echo "First launch will take some time, please be patient..."

    if [ -d "${APP_DATA_DIR}" ] && [ ! -z "ls -A ${APP_DATA_DIR}" ]; then
        # last init not complete
        if [ -f "${APP_INIT_START}" ] && [ ! -f "${APP_INIT_DONE}" ]; then
            echo "Last init not complete, delete ${APP_DATA_DIR} and try again."
            rm -rf "${APP_DATA_DIR}"
        else
            # rename the dir
            BAK="${APP_DATA_DIR}_$(date +%s)"
            echo "Renaming ${APP_DATA_DIR} to ${BAK}"
            mv -v "${APP_DATA_DIR}" "${BAK}"
        fi
    fi

    # set a empty file to indicate init start
    mkdir -p "${APP_DATA_DIR}"
    touch "${APP_INIT_START}"

    if [ -f "${APP_DATA_TAR}" ]; then
        echo "Uncompressing data from ${APP_DATA_TAR} to ${APP_DATA_VOLUME}"
        tar -xf "${APP_DATA_TAR}" -C "${APP_DATA_VOLUME}" \
            --checkpoint=$(($(stat -L -c %s "${APP_DATA_TAR}") / 512 / 20 / 100)) \
            --checkpoint-action=. &&
            echo "Done"
    fi

    if rclone lsd "${APP_PUBLIC_DATA}" &>/dev/null; then
        echo "Syncing public data: from ${APP_PUBLIC_DATA}/ to ${APP_DATA_DIR}/"

        # sync user data
        mkdir -p "${APP_DATA_DIR}/output"
        rclone copy --progress \
            "${APP_PUBLIC_DATA}/extra_model_paths.yaml" \
            "${APP_DATA_DIR}/"
        rclone sync --progress \
            "${APP_PUBLIC_DATA}/user/" \
            "${APP_DATA_DIR}/user/"

        # sync models from public data
        rclone sync --progress \
            "${APP_PUBLIC_DATA}/models/embeddings/" \
            "${APP_DATA_DIR}/models/embeddings/"
        rclone sync --progress \
            "${APP_PUBLIC_DATA}/models/vae/" \
            "${APP_DATA_DIR}/models/vae/"
        rclone sync --progress \
            "${APP_PUBLIC_DATA}/models/vae_approx/" \
            "${APP_DATA_DIR}/models/vae_approx/"
        rclone sync --progress \
            "${APP_PUBLIC_DATA}/models/sams/" \
            "${APP_DATA_DIR}/models/sams/"
        rclone sync --progress \
            "${APP_PUBLIC_DATA}/models/clip_vision/" \
            "${APP_DATA_DIR}/models/clip_vision/"
        rclone sync --progress \
            "${APP_PUBLIC_DATA}/models/ipadapter/" \
            "${APP_DATA_DIR}/models/ipadapter/"
        rclone sync --progress \
            "${APP_PUBLIC_DATA}/models/ultralytics/" \
            "${APP_DATA_DIR}/models/ultralytics/"
        rclone sync --progress \
            "${APP_PUBLIC_DATA}/models/loras/" \
            "${APP_DATA_DIR}/models/loras/"
        rclone sync --progress \
            "${APP_PUBLIC_DATA}/models/controlnet/" \
            "${APP_DATA_DIR}/models/controlnet/"
        rclone sync --progress \
            "${APP_PUBLIC_DATA}/models/checkpoints/" \
            "${APP_DATA_DIR}/models/checkpoints/"
    fi

    # set a empty file to indicate init complete
    touch "${APP_INIT_DONE}"
fi

load_venv() {
    if [[ -f "${APP_VENV_DIR}/bin/activate" ]]; then
        source "${APP_VENV_DIR}/bin/activate"
    else
        echo "No venv found, creating a new one"
        "$(conda env list | awk '$1 == "'${APP_NAME}'" { print $NF }')/bin/python" \
            -m venv "$([[ -L "${APP_VENV_DIR}" ]] && readlink "${APP_VENV_DIR}" || echo "${APP_VENV_DIR}")"
        source "${APP_VENV_DIR}/bin/activate"
        # first launch
        pip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu121
        pip install -r "${APP_DIR}/requirements.txt"
    fi
}

# set http proxy without prompt
. network-turbo && proxy_set <<<""

cd "${APP_DIR}" && load_venv &&
    python3 main.py \
        --listen \
        --port "${APP_PORT}" \
        --preview-method auto \
        --output-directory ${APP_DATA_DIR}/output \
        --extra-model-paths-config ${APP_DATA_DIR}/extra_model_paths.yaml \
        $@
