#!/usr/bin/env bash
set -e

APP_NAME="ComfyUI"
APP_DIR=${COMFYUI_DIR:-"/root/${APP_NAME}"}
APP_PORT=${COMFYUI_PORT:-"10000"}
APP_DATA_TAR=${COMFYUI_DATA_TAR:-"/root/${APP_NAME}_data.tar"}
APP_DATA_VOLUME=${COMFYUI_DATA_VOLUME:-"/root/data"}
# share public data with sd_webui
APP_PUBLIC_DATA=${COMFYUI_PUBLIC_DATA:-"/root/public/sd_webui/data"}

CACHE=${APP_DIR}/.cache
export XDG_CACHE_HOME=${CACHE}

# make sure conda env exist
if ! $(conda env list | grep -q "${APP_NAME}"); then
    echo "Creating conda env '${APP_NAME}'"
    conda create -y --name "${APP_NAME}" python=3.10.13
fi

# check if venv is a link file
if [ -L "${APP_DIR}/venv" ]; then
    # try extract from existing tar file
    if [ ! -d "$(readlink "${APP_DIR}/venv")" ] && [ -f "${APP_DATA_TAR}" ]; then
        echo "First launch will take some time, please be patient..."

        target="${APP_DATA_VOLUME}/${APP_NAME}"
        if [ -d "${target}" ] && [ ! -z "ls -A ${target}" ]; then
            # prompt for confirmation
            read -p "Target dir ${target} is not empty. It will be moved to new dir. Do you want to continue? (y/N) " -n 1 -r REPLY && echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                echo "Aborted"
                exit 1
            fi
            # rename the target dir
            backup_target="${target}_$(date +%s)"
            echo "Renaming ${target} to ${backup_target}"
            mv "${target}" "${backup_target}"
        fi

        echo "Uncompressing data from ${APP_DATA_TAR} to ${APP_DATA_VOLUME}"
        tar -xf "${APP_DATA_TAR}" -C "${APP_DATA_VOLUME}" \
            --checkpoint=$(($(stat -L -c %s "${APP_DATA_TAR}") / 512 / 20 / 100)) \
            --checkpoint-action=. &&
            echo "Done"

        # sync controlnet modules
        if [ -d "${APP_PUBLIC_DATA}" ]; then
            echo "Syncing public data to ${target}/"
            rclone sync --progress --max-delete=0 \
                "${APP_PUBLIC_DATA}/models/ControlNet" \
                "${target}/models/controlnet/"
        fi

    else
        # check all link files in ${APP_DIR}, if link target dir not exist, create the target dir
        for f in $(find "${APP_DIR}" -type l); do
            target="$(readlink "${f}")"
            if [ ! -d "${target}" ]; then
                mkdir -p "${target}"
            fi
        done
    fi
fi

load_venv() {
    if [[ -z "${VIRTUAL_ENV}" ]]; then
        venv_dir="${APP_DIR}/venv"
        if [[ -f "${venv_dir}"/bin/activate ]]; then
            source "${venv_dir}"/bin/activate
        else
            "$(conda env list | awk '$1 == "'${APP_NAME}'" { print $NF }')/bin/python" \
                -m venv "$([[ -L "${venv_dir}" ]] && readlink "${venv_dir}" || echo "${venv_dir}")"
            # first launch
            pip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu121
            pip install -r "${APP_DIR}/requirements.txt"
        fi
    else
        printf "python venv already activate or run without venv: ${VIRTUAL_ENV}"
    fi
}

cd "${APP_DIR}" && load_venv &&
    python3 main.py \
        --listen \
        --port "${APP_PORT}" \
        $@
